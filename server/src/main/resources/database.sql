CREATE DATABASE cashmanagement;

CREATE TABLE countries (
    country_id INT GENERATED BY DEFAULT AS IDENTITY,
    country_name VARCHAR(255) UNIQUE NOT NULL,
    PRIMARY KEY (country_id)
);

CREATE TABLE cities (
    city_id INT GENERATED BY DEFAULT AS IDENTITY,
    city_name VARCHAR(255) UNIQUE NOT NULL,
    PRIMARY KEY (city_id)
);

CREATE TABLE country_cities (
    country_id INT NOT NULL,
    city_id INT NOT NULL,
    FOREIGN KEY (country_id) REFERENCES countries (country_id) ON DELETE CASCADE,
    FOREIGN KEY (city_id) REFERENCES cities (city_id) ON DELETE CASCADE,
    PRIMARY KEY (country_id, city_id)
);

CREATE TABLE users (
    user_id INT GENERATED BY DEFAULT AS IDENTITY,
    first_name VARCHAR(20) NOT NULL,
    last_name VARCHAR(60) NOT NULL,
    phone VARCHAR(19) UNIQUE NOT NULL,
    email VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY(user_id)
);

CREATE TABLE roles (
    role_id INT GENERATED BY DEFAULT AS IDENTITY,
    role_name VARCHAR(255) UNIQUE NOT NULL,
    PRIMARY KEY (role_id)
);

CREATE TABLE access (
    access_id INT GENERATED BY DEFAULT AS IDENTITY,
    user_id INT NOT NULL,
    login VARCHAR(20) NOT NULL,
    user_password VARCHAR(255) NOT NULL,
    active BOOLEAN NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (access_id)
);

CREATE TABLE user_roles (
    user_id INT NOT NULL,
    role_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles (role_id) ON DELETE CASCADE,
    PRIMARY KEY (user_id, role_id)
);

CREATE TABLE companies (
    company_id INT GENERATED BY DEFAULT AS IDENTITY,
    company_name VARCHAR(255) UNIQUE NOT NULL,
    PRIMARY KEY (company_id)
);

CREATE TABLE city_companies (
    city_id INT NOT NULL,
    company_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    home_num INT NOT NULL,
    FOREIGN KEY (city_id) REFERENCES cities (city_id) ON DELETE CASCADE,
    FOREIGN KEY (company_id) REFERENCES companies (company_id) ON DELETE CASCADE,
    PRIMARY KEY (city_id, company_id)
);

CREATE TABLE company_users (
    company_id INT NOT NULL,
    user_id INT NOT NULL,
    FOREIGN KEY (company_id) REFERENCES companies (company_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (company_id, user_id)
);

CREATE TABLE atms (
    atm_id INT GENERATED BY DEFAULT AS IDENTITY,
    atm_uid VARCHAR(8) UNIQUE NOT NULL,
    cash_state VARCHAR(255) CHECK (cash_state IN ('Нормальное', 'Нижний лимит')) NOT NULL,
    atm_state VARCHAR(255) CHECK (atm_state IN ('Нормальный','Проблематичный', 'Неопределённый')) NOT NULL,
    PRIMARY KEY (atm_id)
);

CREATE TABLE city_atms (
    city_id INT NOT NULL,
    atm_id INT NOT NULL,
    address VARCHAR(255) NOT NULL,
    home_num INT NOT NULL,
    FOREIGN KEY (city_id) REFERENCES cities (city_id) ON DELETE CASCADE,
    FOREIGN KEY (atm_id) REFERENCES atms (atm_id) ON DELETE CASCADE,
    PRIMARY KEY (city_id, atm_id)
);

CREATE TABLE cassettes (
    cassette_id INT GENERATED BY DEFAULT AS IDENTITY,
    cassette_num INT NOT NULL,
    banknote FLOAT NOT NULL,
    currency VARCHAR (3) NOT NULL,
    amount INT CHECK (amount >= 0 AND amount <= 2500) NOT NULL,
    PRIMARY KEY (cassette_id)
);

CREATE TABLE atm_cassettes (
    atm_id INT NOT NULL,
    cassette_id INT NOT NULL,
    FOREIGN KEY (atm_id) REFERENCES atms (atm_id) ON DELETE CASCADE,
    FOREIGN KEY (cassette_id) REFERENCES cassettes (cassette_id) ON DELETE CASCADE,
    PRIMARY KEY (atm_id, cassette_id)
);

CREATE TABLE brigades (
    brigade_id INT GENERATED BY DEFAULT AS IDENTITY,
    company_id INT NOT NULL,
    brigade_name VARCHAR(255) UNIQUE NOT NULL,
    active BOOLEAN NOT NULL,
    FOREIGN KEY (company_id) REFERENCES companies (company_id) ON DELETE CASCADE,
    PRIMARY KEY (brigade_id)
);

CREATE TABLE brigade_users (
    brigade_id INT NOT NULL,
    user_id INT NOT NULL,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (brigade_id) REFERENCES brigades (brigade_id) ON DELETE CASCADE,
    PRIMARY KEY (brigade_id, user_id)
);

CREATE TABLE storages (
    storage_id INT GENERATED BY DEFAULT AS IDENTITY,
    currency VARCHAR(3) NOT NULL,
    amount FLOAT NOT NULL,
    PRIMARY KEY (storage_id)
);

CREATE TABLE storage_operations (
    operation_id INT GENERATED BY DEFAULT AS IDENTITY,
    storage_id INT NOT NULL,
    update_date DATE DEFAULT CURRENT_DATE NOT NULL,
    amount_operation FLOAT NOT NULL,
    FOREIGN KEY (storage_id) REFERENCES storages (storage_id) ON DELETE CASCADE,
    PRIMARY KEY (operation_id)
);

CREATE TABLE company_storages (
    storage_id INT NOT NULL,
    company_id INT NOT NULL,
    FOREIGN KEY (company_id) REFERENCES companies (company_id) ON DELETE CASCADE,
    FOREIGN KEY (storage_id) REFERENCES storages (storage_id) ON DELETE CASCADE,
    PRIMARY KEY (storage_id, company_id)
);
---
CREATE TABLE withdrawal_cash (
    withdrawal_id INT GENERATED BY DEFAULT AS IDENTITY,
    withdrawal_date DATE NOT NULL,
    atm_id INT NOT NULL,
    cassette_id INT NOT NULL,
    amount FLOAT NOT NULL,
    FOREIGN KEY (cassette_id) REFERENCES cassettes (cassette_id) ON DELETE CASCADE,
    FOREIGN KEY (atm_id) REFERENCES atms (atm_id) ON DELETE CASCADE,
    PRIMARY KEY (withdrawal_id)
);
---
CREATE TABLE plan_atms (
    plan_id INT GENERATED BY DEFAULT AS IDENTITY,
    atm_id INT NOT NULL,
    plan_method VARCHAR(30) CHECK (plan_method IN ('Статический', 'Ручная настройка')) NOT NULL,
    status VARCHAR(30) CHECK (status IN ('Рассчитан', 'Изменен')) NOT NULL,
    plan_period INT NOT NULL,
    FOREIGN KEY (atm_id) REFERENCES atms (atm_id) ON DELETE CASCADE,
    PRIMARY KEY (plan_id)
);

CREATE TABLE plan_cassets (
    plan_id INT NOT NULL,
    cassette_id INT NOT NULL,
    FOREIGN KEY (plan_id) REFERENCES plan_atms (plan_id),
    FOREIGN KEY (cassette_id) REFERENCES cassettes (cassette_id),
    PRIMARY KEY (plan_id, cassette_id)
);

CREATE TABLE orders (
    order_id INT GENERATED BY DEFAULT AS IDENTITY,
    atm_id INT NOT NULL,
    plan_id INT NOT NULL,
    stage VARCHAR(50) CHECK (stage IN ('Генерация заказа наличных денег',
    'Принятие заказа наличных денег', 'Заполнение кассет',
    'Передача наличных', 'Инкассация (загрузка)', 'Инкассация (разгрузка остатков)',
    'Приём наличных в хранилище', 'Выполнен')) NOT NULL,
    collection_date DATE NOT NULL, -- дата создания заказа?
    user_id INT NOT NULL,
    FOREIGN KEY (atm_id) REFERENCES atms (atm_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    FOREIGN KEY (plan_id) REFERENCES plan_atms (plan_id) ON DELETE CASCADE,
    PRIMARY KEY (order_id)
);

CREATE TABLE order_stages (
    order_id INT NOT NULL,
    stage_id INT NOT NULL, -- 7 стадий
    stage_date DATE NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE,
    PRIMARY KEY (order_id, stage_id)
);

CREATE TABLE storage_orders (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    order_id INT NOT NULL,
    order_date DATE DEFAULT CURRENT_DATE NOT NULL,
    user_id INT NOT NULL,
    status VARCHAR(30) CHECK (status IN ('Сформирован','Подтвержден', 'Новый', 'Сформировано поручение', 'Выполнен','Назначена бригада',' Передан на исполнение','Отклонен')) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE,
    FOREIGN KEY (user_id) REFERENCES users (user_id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);

CREATE TABLE brigade_orders (
    id INT GENERATED BY DEFAULT AS IDENTITY,
    order_id INT NOT NULL,
    order_date DATE DEFAULT CURRENT_DATE NOT NULL,
    brigade_id INT NOT NULL,
    order_comment VARCHAR(255) NOT NULL,
    status VARCHAR(255) CHECK (status IN ('Не определен', 'Рассчитан', 'Принят','Передан на исполнение','Отклонен')) NOT NULL,
    FOREIGN KEY (order_id) REFERENCES orders (order_id) ON DELETE CASCADE,
    FOREIGN KEY (brigade_id) REFERENCES brigades (brigade_id) ON DELETE CASCADE,
    PRIMARY KEY (id)
);