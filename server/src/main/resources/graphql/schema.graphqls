type Query {
    users: [User!]!
    user(id: ID): User
    atm(id: ID): Atm
    access(id: ID): Access
    accesses: [Access!]!
    roles: [Role!]!
    companies: [Company!]!
    atms: [Atm!]!
    plans: [PlanAtm!]!
    storages: [Storage!]!
    operations: [StorageOperation!]!
    orders: [Order!]!
    brigades: [Brigade!]!
    cities: [City!]!
    countries: [Country!]!
    brigadeOrders: [BrigadeOrder!]!
    storageOrders: [StorageOrder!]!
    withdrawalCashes: [WithdrawalCash!]!
    orderStages: [OrderStage!]!
}

type Mutation {
    createWork(work: CreateWorkInput!): String
    createUser(user: CreateUserInput!, role: UpdateRoleInput!, company: UpdateCompanyInput!): User!
    updateUser(user: UpdateUserInput!, role: UpdateRoleInput!, company: UpdateCompanyInput!): User!
    deleteUser(id: ID!): Int

    updateAccess(access: UpdateAccessInput!, user: UpdateIdInput!): Access!
    createAccess(access: CreateAccessInput!, user: UpdateIdInput!): Access!

    createCompany(company: CreateCompanyInput!, city: UpdateIdInput!): Company!
}

type WorkTime {
    dateTime: String!,
    firstName: String!,
    lastName: String!,
    description: String!
}

input CreateCompanyInput {
    companyName: String!
    address: String!,
    homeNum: Int!
}

input CreateCityCompanyInput {
    address: String!,
    homeNum: Int!
}

input UpdateCompanyInput {
    id: ID!
}

input UpdateRoleInput {
    id: ID!
}

input UpdateAccessInput {
    id: ID!,
    login: String!,
    userPassword: String!,
    active: Boolean
}

input CreateAccessInput {
    login: String!,
    userPassword: String!,
    active: Boolean
}

input CreateWorkInput {
    firstName: String!,
    lastName: String!,
    description: String!
}

input CreateUserInput {
    firstName: String!,
    lastName: String!,
    phone: String!,
    email: String!
}

input UpdateUserInput {
    id: ID!,
    firstName: String!,
    lastName: String!,
    phone: String!,
    email: String!
}

input UpdateIdInput {
    id: ID!,
}

type Role {
    id: ID!,
    roleName: String!
}

type Access {
    id: ID!,
    user: User!,
    login: String!,
    userPassword: String!,
    active: Boolean
}

type User {
    id: ID!,
    firstName: String!,
    lastName: String!,
    phone: String!,
    email: String!,
    roles: [Role],
    companies: [Company]
}

type Company {
    id: ID!,
    companyName: String!
    address: String!,
    homeNum: Int!
}

type Atm {
    id: ID!,
    atmUid: String!,
    cashState: String!,
    atmState: String!
    cassettes: [Cassette]!,
    companies: [Company]!
}

type Cassette {
    id: ID!,
    cassetteNum: Int!,
    banknote: Float,
    currency: String!,
    amount: Int!
}

type PlanAtm {
    id: ID!,
    atm: Atm!,
    planMethod: String!,
    status: String!,
    planPeriod: Int!
}

type Storage {
    id: ID!,
    banknote: Float!,
    currency: String!,
    amount: Float!,
    companies: [Company]!,
    storageOperations: [StorageOperation]
}

type StorageOperation {
    id: ID!,
    storage: Storage!,
    updateDate: String!,
    banknote: Float!,
    amountOperation: Float!
}

type Order {
    id: ID!,
    plan: PlanAtm!,
    stage: String!,
    collectionDate: String!,
    user: User!,
    orderStages: [OrderStage]
}

type OrderStage {
    id: OrderStageId!,
    order: Order!,
    stageDate: String!
}

type OrderStageId {
    orderId: ID!,
    stageId: ID!
}

type Brigade {
    id: ID!,
    company: Company!,
    brigadeName: String!,
    active: Boolean!
    users: [User]!
}

type City {
    id: ID!,
    cityName: String!
}

type Country {
    id: ID!,
    countryName: String!,
    cities: [City]!
}

type BrigadeOrder {
    id: ID!,
    order: Order!,
    orderDate: String!,
    brigade: Brigade!,
    user: User!
}

type StorageOrder {
    id: ID!,
    order: Order!,
    orderDate: String!,
    user: User!
}

type WithdrawalCash {
    id: ID!,
    withdrawalDate: String!,
    atm: Atm!,
    cassette: Cassette,
    amount: Float!
}